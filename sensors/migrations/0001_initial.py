# Generated by Django 5.2.7 on 2025-10-28 20:08

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nazwa')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Adres')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data utworzenia')),
                ('price_per_kwh', models.FloatField(default=0.8, verbose_name='Cena za kWh [PLN]')),
                ('monthly_limit_kwh', models.FloatField(blank=True, help_text='Alert gdy przekroczono limit', null=True, verbose_name='Limit miesięczny [kWh]')),
                ('alert_email', models.EmailField(blank=True, help_text='Jeśli pusty, użyje email użytkownika', max_length=254, verbose_name='Email do alertów')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='houses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dom',
                'verbose_name_plural': 'Domy',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.CharField(blank=True, max_length=100, null=True, unique=True, verbose_name='ID czujnika')),
                ('name', models.CharField(max_length=100, verbose_name='Nazwa')),
                ('description', models.TextField(blank=True, verbose_name='Opis')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data dodania')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktywny')),
                ('location', models.CharField(blank=True, help_text="Np. 'Salon', 'Kuchnia', 'Piwnica'", max_length=100, verbose_name='Lokalizacja')),
                ('icon', models.CharField(default='microchip', help_text="Nazwa ikony Font Awesome (bez 'fa-')", max_length=50, verbose_name='Ikona')),
                ('color', models.CharField(default='#3b82f6', help_text='Hex color, np. #3b82f6', max_length=7, verbose_name='Kolor')),
                ('power_threshold', models.FloatField(blank=True, help_text='Alert gdy moc przekroczy tę wartość', null=True, verbose_name='Próg mocy [W]')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='sensors.house')),
            ],
            options={
                'verbose_name': 'Czujnik',
                'verbose_name_plural': 'Czujniki',
                'ordering': ['house', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('dark', 'Ciemny'), ('light', 'Jasny')], default='dark', max_length=10, verbose_name='Motyw')),
                ('email_alerts', models.BooleanField(default=True, verbose_name='Alerty email')),
                ('alert_frequency', models.CharField(choices=[('immediate', 'Natychmiast'), ('hourly', 'Co godzinę'), ('daily', 'Dziennie')], default='immediate', max_length=20, verbose_name='Częstotliwość alertów')),
                ('live_refresh_interval', models.IntegerField(default=5, help_text='Co ile sekund odświeżać widget live (1-60)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)], verbose_name='Odświeżanie [s]')),
                ('show_predictions', models.BooleanField(default=True, verbose_name='Pokazuj predykcje')),
                ('monthly_goal_kwh', models.FloatField(blank=True, null=True, verbose_name='Cel miesięczny [kWh]')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ustawienia użytkownika',
                'verbose_name_plural': 'Ustawienia użytkowników',
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Utworzono'), ('update', 'Zaktualizowano'), ('delete', 'Usunięto'), ('assign', 'Przypisano'), ('alert', 'Alert')], max_length=20, verbose_name='Akcja')),
                ('model_name', models.CharField(max_length=50, verbose_name='Model')),
                ('object_id', models.IntegerField(verbose_name='ID obiektu')),
                ('description', models.TextField(verbose_name='Opis')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adres IP')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log aktywności',
                'verbose_name_plural': 'Logi aktywności',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='sensors_act_created_0ba2e8_idx'), models.Index(fields=['user', '-created_at'], name='sensors_act_user_id_8e222d_idx')],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('power_high', 'Przekroczono próg mocy'), ('monthly_limit', 'Przekroczono limit miesięczny'), ('sensor_offline', 'Czujnik offline'), ('anomaly', 'Wykryto anomalię')], max_length=20, verbose_name='Typ alertu')),
                ('severity', models.CharField(choices=[('info', 'Informacja'), ('warning', 'Ostrzeżenie'), ('critical', 'Krytyczny')], default='warning', max_length=10, verbose_name='Ważność')),
                ('message', models.TextField(verbose_name='Wiadomość')),
                ('value', models.FloatField(blank=True, null=True, verbose_name='Wartość')),
                ('threshold', models.FloatField(blank=True, null=True, verbose_name='Próg')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data utworzenia')),
                ('is_read', models.BooleanField(default=False, verbose_name='Przeczytane')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Rozwiązane')),
                ('email_sent', models.BooleanField(default=False, verbose_name='Email wysłany')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='sensors.house')),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='sensors.sensor')),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerty',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['house', '-created_at'], name='sensors_ale_house_i_830e3c_idx'), models.Index(fields=['is_read', 'is_resolved'], name='sensors_ale_is_read_ddd0fb_idx')],
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='Czas pomiaru')),
                ('voltage', models.FloatField(blank=True, null=True, verbose_name='Napięcie [V]')),
                ('current', models.FloatField(blank=True, null=True, verbose_name='Prąd [A]')),
                ('power', models.FloatField(blank=True, null=True, verbose_name='Moc czynna [W]')),
                ('energy', models.FloatField(blank=True, null=True, verbose_name='Energia [kWh]')),
                ('frequency', models.FloatField(blank=True, null=True, verbose_name='Częstotliwość [Hz]')),
                ('pf', models.FloatField(blank=True, null=True, verbose_name='Współczynnik mocy')),
                ('reactive_power', models.FloatField(blank=True, help_text='Obliczona na podstawie mocy czynnej i współczynnika mocy', null=True, verbose_name='Moc bierna [VAR]')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='sensors.sensor')),
            ],
            options={
                'verbose_name': 'Pomiar',
                'verbose_name_plural': 'Pomiary',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['sensor', '-timestamp'], name='sensors_sen_sensor__561443_idx'), models.Index(fields=['timestamp'], name='sensors_sen_timesta_a94ae6_idx')],
            },
        ),
    ]
